#!/bin/bash
source /etc/adduser.conf
source /usr/lib/elive-tools/functions
#el_make_environment
. gettext.sh
TEXTDOMAIN="nurse"
export TEXTDOMAIN

defaultuser="eliveuser"

if [[ -z "$DHOME" ]] || [[ ! -d "$DHOME" ]] ; then
    DHOME="/home"
fi


show_message_exit_x11(){
    local message_exit
    message_exit="$( printf "$( eval_gettext "Sorry, you need to exit from the graphical system or close the program of you like to upgrade, if you need to exit from the graphical system, you need to login in pure console ( Control-Alt-F1 from entrance and Control-Alt-F9 for return to entrance ) and with your user type: elive-skel upgrade" )" )"

    if [[ -n "$DISPLAY" && -f /usr/bin/zenity ]] ; then
        zenity --error --text="$message_exit"
    else
        echo "$message_exit"
    fi
    exit 1
}

show_message_done(){
    local message_done
    message_done="$( printf "$( eval_gettext "Upgrade done, try now to restart the application" )" )"

    if [[ -n "$DISPLAY" && -f /usr/bin/zenity ]] ; then
        zenity --info --text="$message_done"
    else
        echo "$message_done"
    fi
}

show_message_required_select(){
    if [[ -n "$DISPLAY" && -f /usr/bin/zenity ]] ; then
        zenity --info --text="$( eval_gettext "You don't have selected correctly a configuration, no upgrade done, try again." )"
    else
        echo "$( eval_gettext "You don't have selected correctly a configuration, no upgrade done, try again." )"
    fi
    exit 1
}


upgradegraphical(){
    # return if we have conf
    [[ -n "$2" ]] && return

    # improve this crap
    nameconf="$( ls -a /etc/skel | egrep "\\." | egrep -v "\\.$" | zenity --list --text="$( eval_gettext "Select a personal configuration for upgrade" )" --column="$( eval_gettext "Configuration" )" || echo cancel ; )"

    [[ "$nameconf" = "cancel" ]] && exit 1
    [[ "$nameconf" = "" ]] && { show_message_required_select ; exit 1 ; }

    ps aux | grep e16 | grep -v grep | awk -v user="$USER" '$1 ~ user { print $NF }' | grep e16 && [[ "$nameconf" = ".e16" ]] && show_message_exit_x11

    ps aux | grep enlightenment | grep -v grep | awk -v user="$USER" '$1 ~ user { print $NF }' | grep enlightenment && [[ "$nameconf" = ".e" ]] && show_message_exit_x11

    ps aux | grep xchat | grep -v grep | awk -v user="$USER" '$1 ~ user { print $NF }' | grep xchat && [[ "$nameconf" = ".xchat2" ]] && show_message_exit_x11
}

upgradeconsole(){
    # return if we have conf
    [[ -n $2 ]] && return

    echo -e "Select a conf name (included the dot if any) for upgrade"
    ls -a /etc/skel/ | egrep "\\." | egrep -v "\\.$" | less

    echo -e "Enter the name of one configuration for upgrade"
    read nameconf

    [[ "$nameconf" = "" ]] && { show_message_required_select ; exit 1 ; }

    ps aux | grep e16 | grep -v grep | awk -v user="$USER" '$1 ~ user { print $NF }' | grep e16 && [[ "$nameconf" = ".e16" ]] && show_message_exit_x11
    ps aux | grep enlightenment | grep -v grep | awk -v user="$USER" '$1 ~ user { print $NF }' | grep enlightenment && [[ "$nameconf" = ".e" ]] && show_message_exit_x11
    ps aux | grep xchat | grep -v grep | awk -v user="$USER" '$1 ~ user { print $NF }' | grep xchat && [[ "$nameconf" = ".xchat2" ]] && show_message_exit_x11
}

upgradedirect(){
    unset DISPLAY
    nameconf="$2"
}

upgradefromroot(){
    local usuario direlegido nameconf subdir
    nameconf="$2"
    usuario="$3"

    if [[ "$nameconf" = */* ]] ; then
        subdir="$( dirname "$nameconf" )"
        subdir="${subdir%/}/"
        nameconf="$( basename "$nameconf" )"
    else
        subdir=""
    fi

    el_check_variables "nameconf,usuario"


    [[ "$UID" != "0" ]] && { echo -e "You need root for this option" && exit 1 ; }

    direlegido=$( awk -v usuario="$usuario" 'BEGIN{FS=":"}{if ($1 == usuario) print $6 }' /etc/passwd )

    if [[ -z "$direlegido" ]] || ! el_check_dirs "$direlegido" ; then
        el_error "homedir of user not found, exiting..."
        exit 1
    fi

    if [[ -z "$nameconf" ]] ; then
        el_error "nameconf empty, exiting..."
        exit 3
    fi

    rm -rf "$direlegido/${subdir}${nameconf}.old" 2>/dev/null
    mv "$direlegido/${subdir}$nameconf" "$direlegido/${subdir}${nameconf}.old" 2>/dev/null || true # backuping the old one

    if [[ "$nameconf" = ".e" ]] && ! [[ -d "/etc/skel/${subdir}$nameconf" ]] ; then
        el_debug "Importing E parts to a new E conf"
        mkdir -p "$direlegido/${subdir}$nameconf"
    else
        if [[ -e "/etc/skel/${subdir}$nameconf" ]] ; then
            if cp -a "/etc/skel/${subdir}$nameconf" "$direlegido/${subdir}" ; then
                convert_dir "$usuario" "$direlegido/${subdir}$nameconf"
                restore_user_confs "$usuario" "${subdir}$nameconf"
            else
                el_error "Not posible to copy to the HOME dir of $usuario ($direlegido)"
                exit 4
            fi
        else
            el_error "/etc/skel/${subdir}$nameconf doesn't exist"
            exit 5
        fi
    fi


    case "$nameconf" in
        .config)
            # TODO: actually .config is much bigger, most of the apps confs comes from here, so it will need an independent structure
            mkdir -p "$direlegido/.config/xpad"
            cp -a "${direlegido}/.config.old/xpad/*" "${direlegido}/.config/xpad/" 2>/dev/null || true

            mkdir -p "$direlegido/.config/transmission"
            cp -a "${direlegido}/.config.old/transmission/*" "${direlegido}/.config/transmission/" 2>/dev/null
            ;;
        .e)
            # Note: only for root mode (installer upgrade), if is done by the user, ask if want a full update
            mkdir -p "${direlegido}/.e/e/themes/" "${direlegido}/.e/e/backgrounds/" "${direlegido}/.e/e/applications/bar/default/" "${direlegido}/.e/e17/themes/" "${direlegido}/.e/e17/backgrounds/" "${direlegido}/.e/e17/applications/bar/default/"
            #cp -a "${direlegido}/.e.old/e17/applications/bar/default/.order" "${direlegido}/.e/e17/applications/bar/default/.order" 2>/dev/null
            cp -a "${direlegido}/.e.old/e17/backgrounds/*" "${direlegido}/.e/e17/backgrounds/" 2>/dev/null
            cp -a "${direlegido}/.e.old/e17/themes/*" "${direlegido}/.e/e17/themes/" 2>/dev/null

            #cp -a "${direlegido}/.e.old/e/applications/bar/default/.order" "${direlegido}/.e/e/applications/bar/default/.order" 2>/dev/null
            cp -a "${direlegido}/.e.old/e/backgrounds/*" "${direlegido}/.e/backgrounds/" 2>/dev/null
            cp -a "${direlegido}/.e.old/e/themes/*" "${direlegido}/.e/themes/" 2>/dev/null
            ;;
    esac

    if [[ -z "$4" ]] ; then
        chown -R "$usuario:$usuario" "$direlegido/${subdir}$nameconf"
    else
        chown -R "$usuario:$4" "$direlegido/${subdir}$nameconf"
    fi

    exit
}

upgradetype(){
    local subdir nameconf
    # $2 = conf, $3 = user, $4 = group
    if [[ -n "$2" ]] ; then
        # we unset display because we don't want to show the GUI if we have the enough data to use (refactor this someday)
        unset DISPLAY
        nameconf="$2"
    fi

    if [[ -n "$3" ]] ; then
        upgradefromroot "$@"
        exit
    fi

    # get subdir structure for things like .config/Thunar
    if [[ "$nameconf" = */* ]] ; then
        subdir="$( dirname "$nameconf" )"
        subdir="${subdir%/}/"
        nameconf="$( basename "$nameconf" )"
    else
        subdir=""
    fi

    # if we have not defined $3 (user) is because we want to upgrade OUR user

    if [[ -n "$DISPLAY" ]] && [[ -x /usr/bin/zenity ]] ; then
        zenity --info --text="$( eval_gettext "Make sure that you have closed the application that you want to upgrade its configuration." )"
    else
        NOREPORTS=1 el_warning "$( eval_gettext "Make sure that you have closed the application that you want to upgrade its configuration." )"
    fi

    # select which conf to upgrade
    if [[ -n "$DISPLAY" && -f /usr/bin/zenity ]] ; then
        upgradegraphical "$@"
    else
        upgradeconsole "$@"
    fi

    [[ -z "$nameconf" ]] && { show_message_required_select ; exit 1 ; }

    [[ -e "$HOME/${subdir}$nameconf.old" ]] && rm -rf "$HOME/${subdir}$nameconf.old"
    mv "$HOME/${subdir}$nameconf" "$HOME/${subdir}$nameconf.old" 2>/dev/null || true

    #el_warning "copying files from skel by user can give errors from unreadable files"

    if [[ "$nameconf" = ".e" ]] && ! [[ -d "/etc/skel/${subdir}$nameconf" ]] ; then
        el_debug "Importing E parts to a new E conf"
        mkdir -p "$HOME/${subdir}$nameconf"
    else
        if ! cp -a "/etc/skel/${subdir}$nameconf" "$HOME/${subdir}$nameconf" 2>/dev/null ; then
            if [[ -n $DISPLAY && -f /usr/bin/zenity ]] ; then
                zenity --error --text="Not possible to copy the $nameconf to $HOME/${subdir}$nameconf. Recovering to previous state..."
            else
                el_error "Not posible to copy the $nameconf to the $HOME/${subdir}$nameconf. Recovering to previous state..."
            fi

            rm -rf "$HOME/${subdir}$nameconf"
            mv "$HOME/${subdir}$nameconf.old" "$HOME/${subdir}$nameconf" 2>/dev/null || true

            exit
        fi
    fi

    #case "$nameconf" in
        #.config)
            #cp -a $HOME/.config.old/xpad/* "$HOME/.config/xpad/"
            #cp -a "$HOME/.config.old/transmission" "$HOME/.config/"
            #;;
        #.e)
            #if [[ -n $DISPLAY && -x /usr/bin/zenity ]] ; then
                #if zenity --question --text="$( eval_gettext "Select OK if you want to upgrade your E17 configuration with saving wallpapers, themes, and the bar applications. Select Cancel if you want a full clean upgrade" )" ; then

                    #cp -a $HOME/.e.old/e/applications/bar/default/.order $HOME/.e/e/applications/bar/default/.order 2>/dev/null
                    #cp -a $HOME/.e.old/e/backgrounds/* $HOME/.e/backgrounds/ 2>/dev/null
                    #cp -a $HOME/.e.old/e/themes/* $HOME/.e/themes/ 2>/dev/null
                #fi
            #fi
            #;;
    #esac

    restore_user_confs "$USER" "${subdir}$nameconf"

    convert_dir "$USER" "$HOME/${subdir}$nameconf"

    chown -R "${USER}:${USER}" "$HOME/${subdir}$nameconf"

    show_message_done
}

usermode(){
    # (re)-add all the files from skel to the user home and migrates them (warning!)
    # $2 = user, $3 = group
    local direlegido
    [[ ! "$UID" == "0" ]] && { echo -e "You need root for this option, warning" && exit 1 ; }
    [[ -z "$2" ]] && { echo -e "No USERNAME parameter in \$2, exiting..." && exit 1 ; }

    # note: root is not in DHOME
    direlegido="$( awk -v usuario="$2" 'BEGIN{FS=":"}{if ($1 == usuario) print $6 }' /etc/passwd )"
    cd "$direlegido" || { echo "Not posible to enter in the HOME dir of $2" ; exit 4 ; }

    # loop and re-import (wiping out) all the matches from skel
    while read -ru 3 line
    do
        if el_check_variables "line" ; then
            el_debug "deleting and re-importing $line for $2"

            if [[ -d "$direlegido/${line}" ]] ; then
                rm -rf "${direlegido}/${line}.old"
                mv "${direlegido}/${line}" "${direlegido}/${line}.old" 2>/dev/null || true
            fi

            cp -a "/etc/skel/$line" "$direlegido/$line"

            # fix permissions
            if [[ -z "$3" ]] ; then
                chown -R "$2:$2" "$direlegido/$line"
            else
                chown -R "$2:$3" "$direlegido/$line"
            fi
        fi
    done 3<<< "$( ls -a1 /etc/skel/ | awk 'NR > 2' | grep -vE "^(Desktop|Downloads|Documents|Images|Music|Videos|Public)$"  )"

    # append some files
    # Note: No more needed: they will be added as links when new user creation dynamix startup scripts time (user-manager/deliver)
    #cp -a /etc/skel/{Downloads,Documents,Images,Music,Videos,Desktop} "$direlegido/"
    #for file in Downloads Documents Images Music Videos Desktop
    #do
        ## fix permissions
        #if [[ -z "$3" ]] ; then
            #chown -R "$2:$2" "$direlegido/$file"
        #else
            #chown -R "$2:$3" "$direlegido/$file"
        #fi
    #done

    # fix addresses
    convert_all_files "$2"

}

#===  FUNCTION  ================================================================
#          NAME:  convert_dir
#   DESCRIPTION:  convert all the files found
#    PARAMETERS:  $1 = user-to, $2 = target
#       RETURNS:
#===============================================================================
convert_dir(){
    # pre {{{
    local user target file
    el_debug
    el_security_function_loop 20 || return

    username="$1"
    target="$2"
    el_check_variables "username,target,defaultuser"

    if ! [[ -d "$target" ]] ; then
        if [[ -f "$target" ]] ; then
            sed -i "s|$defaultuser|$username|g" "$target"
        else
            el_debug "$target is not a dir? ignoring..."
            return
        fi
    fi

    # }}}

    # only for the files found in skel
    while read -ru 3 file
    do
        if grep -qs "$defaultuser" "$file" ; then
            sed -i "s|$defaultuser|$username|g" "$file"
            el_debug "exporting configurations: User '$username', File '$file' "
        fi
    done 3<<< "$( find "$target" -type f | grep -viE "\.(mp3|avi|mpg|wav|ogg|mkv|torrent|pdf|epub|doc|jpg|odt)$" )"

    # rename files / dirs
    while read -ru 3 file
    do
        if [[ "$file" = *"${defaultuser}"* ]] ; then
            # FIXME: perl dependency
            rename "s|$defaultuser|$username|" "$file"

            el_debug "renaming $file with $username"
        fi
    done 3<<< "$( find "$target" )"

    # fix permissions, if chagned
    chown -R "${username}:${username}" "$target"

}

#===  FUNCTION  ================================================================
#          NAME:  convert_all_files
#   DESCRIPTION:  convert all the files found
#    PARAMETERS:  $1 = user-to
#       RETURNS:
#===============================================================================
convert_all_files(){
    # pre {{{
    local user target file direlegido
    el_debug "$@"
    el_security_function_loop 20 || return

    username="$1"
    direlegido="$( awk -v usuario="$username" 'BEGIN{FS=":"}{if ($1 == usuario) print $6 }' /etc/passwd )"
    if [[ -z "$direlegido" ]] ; then
        # if this is run from adduser, the entry is not yet added, so get it in another way
        direlegido="${DHOME}/$username"
    fi
    el_check_variables "username,defaultuser,direlegido"
    el_check_dirs "$direlegido"

    # }}}

    # only for the files found in skel
    while read -ru 3 file
    do
        file="${file#/etc/skel/}"

        if grep -qs "$defaultuser" "$direlegido/$file" ; then
            sed -i "s|$defaultuser|$username|g" "$direlegido/$file"

            # fix permissions, if chagned
            chown -R "${username}:${username}" "$direlegido/$file"

            el_debug "exporting configurations: User '$username', File '$file' "
        fi
    done 3<<< "$( find /etc/skel -type f | grep -viE "\.(mp3|avi|mpg|wav|ogg|mkv|torrent|pdf|epub|doc|jpg|odt)$" )"

}

#===  FUNCTION  ================================================================
#          NAME:  restore_user_confs
#   DESCRIPTION:  restore some important user configurations that we don't want to remove
#    PARAMETERS:  $1 = user, [$2 = conf(s)]
#                   confs is optional, space/comma-separated entries
#       RETURNS:  -
#===============================================================================
restore_user_confs(){
    # pre {{{
    local user userhome econf confs conf subdir
    el_debug
    el_security_function_loop || return

    user="$1"
    confs="$2"

    userhome="$DHOME/$user"
    el_check_variables "user"

    if [[ -z "$confs" ]] ; then
        confs="$( ls -a1 /etc/skel | awk 'NR > 2' | grep -vE "^(Desktop|Downloads|Documents|Images|Music|Videos|Public)$" | sort -u )"
    fi

    # }}}


    while read -ru 3 conf
    do

        # get subdir structure for things like .config/Thunar
        if [[ "$conf" = */* ]] ; then
            subdir="$( dirname "$conf" )"
            subdir="${subdir%/}/"
            conf="$( basename "$conf" )"
        else
            subdir=""
        fi

        # checks
        if [[ ! -d "$userhome/${subdir}${conf}.old" ]] ; then
            # we don't have a backup to restore, skip it
            continue
        fi

        case "$conf" in
            # .config is moved to subdir, like:
            xpad)
                if [[ -d "$userhome/${subdir}xpad.old" ]] ; then
                    cp "$userhome/${subdir}xpad.old"/* "$userhome/${subdir}xpad/" 2>/dev/null || true
                fi
                ;;
            # or, if we are using the entire dir:
            .config)
                if [[ -d "$userhome/${conf}.old/xpad" ]] ; then
                    cp "$userhome/${conf}.old/xpad"/* "$userhome/${conf}/xpad/" 2>/dev/null || true
                fi
                ;;
            .bashrc)
                # nothing to restore
                true
                ;;
            .e)
                el_dependencies_check "edje_inspector"
                for econf in e e17
                do
                    # restore wallpapers
                    mkdir -p "$userhome/.e/$econf/backgrounds/"
                    for edje in "$userhome"/.e.old/$econf/backgrounds/*edj
                    do
                        if ! [[ -s "$edje" ]] ; then
                            continue
                        fi
                        if edje_inspector "$edje" 1>/dev/null 2>/dev/null ; then
                            el_debug "Copying back E background "$(basename "$edje" )""
                            cp "$edje" "$userhome/.e/$econf/backgrounds/"
                            chown -R "${user}:${user}" "$userhome/.e/$econf/backgrounds/"
                        fi
                    done

                    # restore themes
                    mkdir -p "$userhome/.e/$econf/themes/"
                    for edje in "$userhome"/.e.old/$econf/themes/*edj
                    do
                        if ! [[ -s "$edje" ]] ; then
                            continue
                        fi
                        if edje_inspector "$edje" 1>/dev/null 2>/dev/null ; then
                            el_debug "Copying back E theme "$(basename "$edje" )""
                            cp "$edje" "$userhome/.e/$econf/themes/"
                            chown -R "${user}:${user}" "$userhome/.e/$econf/themes/"
                        fi
                    done
                done


                ;;
            *)
                # nothing (not implemented?) to restore
                true
                #el_debug "$conf not yet implemented in ${FUNCNAME}"
                ;;
        esac
    done 3<<< "$( echo "$confs" | tr ' ' '\n' | tr ',' '\n' )"

}


alltype(){
    # run from root, no ptions, it changes all the keywords of eliveuser to the new user in every home, warning!
    local file i

    [[ "$UID" == "0" ]] || { echo -e "You need root for this option" && exit 1 ; }

    cd "${DHOME}"
    #for i in `ls -1`
    for i in $(find "$DHOME" -mindepth 1 -maxdepth 1 -type d )
    do
        username="$( basename "$i" )"
        if [[ "$username" = "eliveuser" ]] ; then
            continue
        fi
        # user exist?
        if ! grep -qs "^${username}:" /etc/passwd ; then
            continue
        fi
        #echo "exporting configurations from the user $defaultuser to ${username}..."

        convert_all_files "$username"

        # rename files / dirs
        while read -ru 3 file
        do
            if [[ "$file" = *"${defaultuser}"* ]] ; then
                # FIXME: perl dependency
                rename "s|$defaultuser|$username|" "$file"

                el_debug "renaming $file with $username"
            fi
        done 3<<< "$( find "$DHOME/$username" )"
    done
}

addmode(){
    # $1 = (mode), $2 = conf, $3 = username
    if [[ -z $3 ]] ; then
        echo -e "Usage: `basename $0` (add) conf username"
        exit
    fi
    if [[ "$UID" != 0 ]] ; then
        el_error "Need to be root"
        exit 1
    fi
    direlegido="$( awk -v usuario="$3" 'BEGIN{FS=":"}{if ($1 == usuario) print $6 }' /etc/passwd )"

    if [[ ! -d "$direlegido" ]] ; then
        el_error "User not exists?"
        exit
    fi

    #el_warning "copying files from skel by user can give errors from unreadable files"
    #su -c "cp -a '/etc/skel/$2' '$direlegido/'" "$3"

    cp -a "/etc/skel/$2" "$direlegido/"
    convert_dir  "$3" "$direlegido/$2"
    chown -R "$3:$3" "$direlegido/$2"

    el_explain 0 "Conf of $2 added to user $3"
}



#-------------------------------------------------------------------------------
#   Interactive tools, does the work
#-------------------------------------------------------------------------------
interactive_tools(){
    id="$1"
    homeid="${HOME}/${id}"

    [[ ! -e "$homeid" ]] && { zenity --error --text="Not found $homeid, nothing to upgrade?" ; return 1 ; }
    rm -rf "${homeid}.old" 2>/dev/null
    mv "${homeid}" "${homeid}.old" 2>/dev/null || true

    NOREPORTS=1 el_warning "copying files from skel by user can give errors from unreadable files"
    if ! cp -a "/etc/skel/${id}" "$homeid" ; then
        zenity --error --text="Error found by copy '$id' to the user"
        exit 1
    fi

    convert_dir "$USER" "$homeid"

    #find "$homeid" -type f -exec sed -i "s,${DHOME}/${defaultuser},${HOME},g" '{}' \;
    #find "$homeid" -type f -exec sed -i "s,${defaultuser},${USER},g" '{}' \;
    chown -R "${USER}:${USER}" "$homeid"
}
#-------------------------------------------------------------------------------
#   Interactive mode, like upgrade but translated and descriptible
#-------------------------------------------------------------------------------
interactive(){
    # improve this crap, someday
    [[ "$UID" = "0" ]] && { echo -e "Root not allowed for this option" ; return ; }
    [[ ! -d "$HOME" ]] && { echo -e "E: Home is not a dir" ; return ; }

    result="$( echo -e \
        "E17\n""$( eval_gettext "Your Desktop. Includes minimizer, pager, bar, features, and all the gadgets" )""\n"\
        "E17 Confs\n""$( eval_gettext "Your Desktop. Only configurations (doesn't include wallpapers, themes, etc)" )""\n"\
        "Thunar\n""$( eval_gettext "Your File manager and Browser. Includes features and actions" )""\n"\
        "Bash\n""$( eval_gettext "Bash (shell) Configurations" )""\n"\
        "Compiz\n""$( eval_gettext "Compiz (ecomorph) configurations" )""\n"\
        "Terminal\n""$( eval_gettext "Terminal configurations" )""\n"\
        "Web\n""$( eval_gettext "Web Browser (Firefox)" )""\n"\
        "Menus\n""$( eval_gettext "Menus of Applications" )""\n"\
        "Mplayer\n""$( eval_gettext "Media Player" )""\n"\
        "Theme\n""$( eval_gettext "Themes of some applications (gtk, qt and kde)" )""\n"\
        "Other\n""$( eval_gettext "Other configuration not listed here" )""\n"\
        "Exit\n""$( eval_gettext "Exit from here" )" \
        | zenity --list --text="$( eval_gettext "Select a configuration that you want to restore" )" --column="$( eval_gettext "Action" )" --column="$( eval_gettext "Description" )" --width="600" --height="420" || echo cancel )"

    case $result in
        E17)
            interactive_tools ".e"
            sleep 1 ; zenity --info
            ;;
        "E17 Confs")
            interactive_tools ".e/e/config"
            sleep 1 ; zenity --info
            ;;
        Thunar)
            interactive_tools ".config/Thunar"
            sleep 1 ; zenity --info
            ;;
        Bash)
            interactive_tools ".bash_logout"
            interactive_tools ".bashrc"
            interactive_tools ".bash_profile"
            sleep 1 ; zenity --info
            ;;
        Compiz)
            interactive_tools ".ecomp"
            sleep 1 ; zenity --info
            ;;
        Terminal)
            interactive_tools ".Xdefaults"
            sleep 1 ; zenity --info
            ;;
        Web)
            interactive_tools ".mozilla"
            sleep 1 ; zenity --info
            ;;
        Menus)
            interactive_tools ".config/menus"
            interactive_tools ".local/share/applications"
            interactive_tools ".local/share/desktop-directories"
            sleep 1 ; zenity --info
            ;;
        Mplayer)
            interactive_tools ".mplayer"
            sleep 1 ; zenity --info
            ;;
        Theme)
            interactive_tools ".qt"
            interactive_tools ".gtkrc"
            interactive_tools ".gtkrc-2.0"
            interactive_tools ".gtkrc.mine"
            interactive_tools ".kde"
            interactive_tools ".kderc"
            sleep 1 ; zenity --info
            ;;
        Other)
            upgradetype
            ;;
        cancel|Exit)
            return 0
            ;;
        *)
            echo "Option not recognized"
            true
            ;;
    esac

    interactive
}

# Usage
usage(){
    echo -e "Usage: $(basename $BASH_SOURCE) options:"
    echo -e "Use: \"elive-skel all\" for ADAPT the configurations for all users (should be already imported)"
    echo -e "Use: \"elive-skel upgrade [conf] [user] [group]\"  for UPGRADE your configuration or another user"
    echo -e "        if no user is set, it upgrades it to your user, if no conf is set, it asks you interactively"
    echo -e "Use: \"elive-skel interactive: it asks you graphically/interactive a configuration to upgrade (re-import), removing old one"
    echo -e "Use: \"elive-skel user username [group]\" re-import all the default configurations of username, backuping old ones in a .old dir (warning)"
    echo -e "Use: \"elive-skel newuser username\"  for convert all the already-copied skel files of the user (adduser already did it)"
    echo -e "Use: \"elive-skel add conf username\" for ADD configurations/files, like a upgrade but just updating it without remove other things"
    exit 1
}

if [[ -z "${1}" ]] ; then
    usage
fi



#-------------------------------------------------------------------------------
#   Main selector
#-------------------------------------------------------------------------------


case "$1" in
    upgrade|-upgrade|--upgrade)
        upgradetype "$@"
        ;;
    interactive)
        interactive "$@"
        ;;
    all|-all|--all)
        alltype "$@"
        ;;
    user|-user|--user)
        usermode "$@"
        ;;
    newuser|-newuser|--newuser)
        convert_all_files "$2"
        ;;
    add|-add|--add)
        addmode "$@"
        ;;
    *)
        usage
        ;;

esac



# vim: set foldmethod=marker :

